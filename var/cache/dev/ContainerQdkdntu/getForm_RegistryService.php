<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the private 'form.registry' shared service.

include_once $this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form\\FormExtensionInterface.php';
include_once $this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form\\Extension\\DependencyInjection\\DependencyInjectionExtension.php';
include_once $this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form\\FormRegistryInterface.php';
include_once $this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form\\FormRegistry.php';

return $this->services['form.registry'] = new \Symfony\Component\Form\FormRegistry(array(0 => new \Symfony\Component\Form\Extension\DependencyInjection\DependencyInjectionExtension(new \Symfony\Component\DependencyInjection\ServiceLocator(array('FOS\\UserBundle\\Form\\Type\\ChangePasswordFormType' => function () {
    return ${($_ = isset($this->services['fos_user.change_password.form.type']) ? $this->services['fos_user.change_password.form.type'] : $this->services['fos_user.change_password.form.type'] = new \FOS\UserBundle\Form\Type\ChangePasswordFormType('Application\\Sonata\\UserBundle\\Entity\\User')) && false ?: '_'};
}, 'FOS\\UserBundle\\Form\\Type\\GroupFormType' => function () {
    return ${($_ = isset($this->services['fos_user.group.form.type']) ? $this->services['fos_user.group.form.type'] : $this->services['fos_user.group.form.type'] = new \FOS\UserBundle\Form\Type\GroupFormType('Application\\Sonata\\UserBundle\\Entity\\Group')) && false ?: '_'};
}, 'FOS\\UserBundle\\Form\\Type\\ProfileFormType' => function () {
    return ${($_ = isset($this->services['fos_user.profile.form.type']) ? $this->services['fos_user.profile.form.type'] : $this->services['fos_user.profile.form.type'] = new \FOS\UserBundle\Form\Type\ProfileFormType('Application\\Sonata\\UserBundle\\Entity\\User')) && false ?: '_'};
}, 'FOS\\UserBundle\\Form\\Type\\RegistrationFormType' => function () {
    return ${($_ = isset($this->services['fos_user.registration.form.type']) ? $this->services['fos_user.registration.form.type'] : $this->services['fos_user.registration.form.type'] = new \FOS\UserBundle\Form\Type\RegistrationFormType('Application\\Sonata\\UserBundle\\Entity\\User')) && false ?: '_'};
}, 'FOS\\UserBundle\\Form\\Type\\ResettingFormType' => function () {
    return ${($_ = isset($this->services['fos_user.resetting.form.type']) ? $this->services['fos_user.resetting.form.type'] : $this->services['fos_user.resetting.form.type'] = new \FOS\UserBundle\Form\Type\ResettingFormType('Application\\Sonata\\UserBundle\\Entity\\User')) && false ?: '_'};
}, 'FOS\\UserBundle\\Form\\Type\\UsernameFormType' => function () {
    return ${($_ = isset($this->services['fos_user.username_form_type']) ? $this->services['fos_user.username_form_type'] : $this->load('getFosUser_UsernameFormTypeService.php')) && false ?: '_'};
}, 'Sonata\\AdminBundle\\Form\\Type\\AdminType' => function () {
    return ${($_ = isset($this->services['sonata.admin.form.type.admin']) ? $this->services['sonata.admin.form.type.admin'] : $this->services['sonata.admin.form.type.admin'] = new \Sonata\AdminBundle\Form\Type\AdminType()) && false ?: '_'};
}, 'Sonata\\AdminBundle\\Form\\Type\\ChoiceFieldMaskType' => function () {
    return ${($_ = isset($this->services['sonata.admin.doctrine_orm.form.type.choice_field_mask']) ? $this->services['sonata.admin.doctrine_orm.form.type.choice_field_mask'] : $this->services['sonata.admin.doctrine_orm.form.type.choice_field_mask'] = new \Sonata\AdminBundle\Form\Type\ChoiceFieldMaskType()) && false ?: '_'};
}, 'Sonata\\AdminBundle\\Form\\Type\\CollectionType' => function () {
    return ${($_ = isset($this->services['sonata.admin.form.type.collection']) ? $this->services['sonata.admin.form.type.collection'] : $this->services['sonata.admin.form.type.collection'] = new \Sonata\AdminBundle\Form\Type\CollectionType()) && false ?: '_'};
}, 'Sonata\\AdminBundle\\Form\\Type\\Filter\\ChoiceType' => function () {
    return ${($_ = isset($this->services['sonata.admin.form.filter.type.choice']) ? $this->services['sonata.admin.form.filter.type.choice'] : $this->load('getSonata_Admin_Form_Filter_Type_ChoiceService.php')) && false ?: '_'};
}, 'Sonata\\AdminBundle\\Form\\Type\\Filter\\DateRangeType' => function () {
    return ${($_ = isset($this->services['sonata.admin.form.filter.type.daterange']) ? $this->services['sonata.admin.form.filter.type.daterange'] : $this->load('getSonata_Admin_Form_Filter_Type_DaterangeService.php')) && false ?: '_'};
}, 'Sonata\\AdminBundle\\Form\\Type\\Filter\\DateTimeRangeType' => function () {
    return ${($_ = isset($this->services['sonata.admin.form.filter.type.datetime_range']) ? $this->services['sonata.admin.form.filter.type.datetime_range'] : $this->load('getSonata_Admin_Form_Filter_Type_DatetimeRangeService.php')) && false ?: '_'};
}, 'Sonata\\AdminBundle\\Form\\Type\\Filter\\DateTimeType' => function () {
    return ${($_ = isset($this->services['sonata.admin.form.filter.type.datetime']) ? $this->services['sonata.admin.form.filter.type.datetime'] : $this->load('getSonata_Admin_Form_Filter_Type_DatetimeService.php')) && false ?: '_'};
}, 'Sonata\\AdminBundle\\Form\\Type\\Filter\\DateType' => function () {
    return ${($_ = isset($this->services['sonata.admin.form.filter.type.date']) ? $this->services['sonata.admin.form.filter.type.date'] : $this->load('getSonata_Admin_Form_Filter_Type_DateService.php')) && false ?: '_'};
}, 'Sonata\\AdminBundle\\Form\\Type\\Filter\\DefaultType' => function () {
    return ${($_ = isset($this->services['sonata.admin.form.filter.type.default']) ? $this->services['sonata.admin.form.filter.type.default'] : $this->services['sonata.admin.form.filter.type.default'] = new \Sonata\AdminBundle\Form\Type\Filter\DefaultType()) && false ?: '_'};
}, 'Sonata\\AdminBundle\\Form\\Type\\Filter\\NumberType' => function () {
    return ${($_ = isset($this->services['sonata.admin.form.filter.type.number']) ? $this->services['sonata.admin.form.filter.type.number'] : $this->load('getSonata_Admin_Form_Filter_Type_NumberService.php')) && false ?: '_'};
}, 'Sonata\\AdminBundle\\Form\\Type\\ModelAutocompleteType' => function () {
    return ${($_ = isset($this->services['sonata.admin.form.type.model_autocomplete']) ? $this->services['sonata.admin.form.type.model_autocomplete'] : $this->services['sonata.admin.form.type.model_autocomplete'] = new \Sonata\AdminBundle\Form\Type\ModelAutocompleteType()) && false ?: '_'};
}, 'Sonata\\AdminBundle\\Form\\Type\\ModelHiddenType' => function () {
    return ${($_ = isset($this->services['sonata.admin.form.type.model_hidden']) ? $this->services['sonata.admin.form.type.model_hidden'] : $this->services['sonata.admin.form.type.model_hidden'] = new \Sonata\AdminBundle\Form\Type\ModelHiddenType()) && false ?: '_'};
}, 'Sonata\\AdminBundle\\Form\\Type\\ModelListType' => function () {
    return ${($_ = isset($this->services['sonata.admin.form.type.model_list']) ? $this->services['sonata.admin.form.type.model_list'] : $this->services['sonata.admin.form.type.model_list'] = new \Sonata\AdminBundle\Form\Type\ModelListType()) && false ?: '_'};
}, 'Sonata\\AdminBundle\\Form\\Type\\ModelReferenceType' => function () {
    return ${($_ = isset($this->services['sonata.admin.form.type.model_reference']) ? $this->services['sonata.admin.form.type.model_reference'] : $this->services['sonata.admin.form.type.model_reference'] = new \Sonata\AdminBundle\Form\Type\ModelReferenceType()) && false ?: '_'};
}, 'Sonata\\AdminBundle\\Form\\Type\\ModelType' => function () {
    return ${($_ = isset($this->services['sonata.admin.form.type.model_choice']) ? $this->services['sonata.admin.form.type.model_choice'] : $this->load('getSonata_Admin_Form_Type_ModelChoiceService.php')) && false ?: '_'};
}, 'Sonata\\BlockBundle\\Form\\Type\\ContainerTemplateType' => function () {
    return ${($_ = isset($this->services['sonata.block.form.type.container_template']) ? $this->services['sonata.block.form.type.container_template'] : $this->services['sonata.block.form.type.container_template'] = new \Sonata\BlockBundle\Form\Type\ContainerTemplateType(array('@SonataPage/Block/block_container.html.twig' => 'SonataPageBundle default template', '@SonataSeo/Block/block_social_container.html.twig' => 'SonataSeoBundle (to contain social buttons)'))) && false ?: '_'};
}, 'Sonata\\BlockBundle\\Form\\Type\\ServiceListType' => function () {
    return ${($_ = isset($this->services['sonata.block.form.type.block']) ? $this->services['sonata.block.form.type.block'] : $this->load('getSonata_Block_Form_Type_BlockService.php')) && false ?: '_'};
}, 'Sonata\\CoreBundle\\Form\\Type\\BooleanType' => function () {
    return ${($_ = isset($this->services['sonata.core.form.type.boolean']) ? $this->services['sonata.core.form.type.boolean'] : $this->services['sonata.core.form.type.boolean'] = new \Sonata\CoreBundle\Form\Type\BooleanType()) && false ?: '_'};
}, 'Sonata\\CoreBundle\\Form\\Type\\CollectionType' => function () {
    return ${($_ = isset($this->services['sonata.core.form.type.collection']) ? $this->services['sonata.core.form.type.collection'] : $this->services['sonata.core.form.type.collection'] = new \Sonata\CoreBundle\Form\Type\CollectionType()) && false ?: '_'};
}, 'Sonata\\CoreBundle\\Form\\Type\\ColorSelectorType' => function () {
    return ${($_ = isset($this->services['sonata.core.form.type.color_selector']) ? $this->services['sonata.core.form.type.color_selector'] : $this->load('getSonata_Core_Form_Type_ColorSelectorService.php')) && false ?: '_'};
}, 'Sonata\\CoreBundle\\Form\\Type\\ColorType' => function () {
    return ${($_ = isset($this->services['sonata.core.form.type.color']) ? $this->services['sonata.core.form.type.color'] : $this->services['sonata.core.form.type.color'] = new \Sonata\CoreBundle\Form\Type\ColorType()) && false ?: '_'};
}, 'Sonata\\CoreBundle\\Form\\Type\\DatePickerType' => function () {
    return ${($_ = isset($this->services['sonata.core.form.type.date_picker']) ? $this->services['sonata.core.form.type.date_picker'] : $this->load('getSonata_Core_Form_Type_DatePickerService.php')) && false ?: '_'};
}, 'Sonata\\CoreBundle\\Form\\Type\\DateRangePickerType' => function () {
    return ${($_ = isset($this->services['sonata.core.form.type.date_range_picker']) ? $this->services['sonata.core.form.type.date_range_picker'] : $this->load('getSonata_Core_Form_Type_DateRangePickerService.php')) && false ?: '_'};
}, 'Sonata\\CoreBundle\\Form\\Type\\DateRangeType' => function () {
    return ${($_ = isset($this->services['sonata.core.form.type.date_range']) ? $this->services['sonata.core.form.type.date_range'] : $this->load('getSonata_Core_Form_Type_DateRangeService.php')) && false ?: '_'};
}, 'Sonata\\CoreBundle\\Form\\Type\\DateTimePickerType' => function () {
    return ${($_ = isset($this->services['sonata.core.form.type.datetime_picker']) ? $this->services['sonata.core.form.type.datetime_picker'] : $this->load('getSonata_Core_Form_Type_DatetimePickerService.php')) && false ?: '_'};
}, 'Sonata\\CoreBundle\\Form\\Type\\DateTimeRangePickerType' => function () {
    return ${($_ = isset($this->services['sonata.core.form.type.datetime_range_picker']) ? $this->services['sonata.core.form.type.datetime_range_picker'] : $this->load('getSonata_Core_Form_Type_DatetimeRangePickerService.php')) && false ?: '_'};
}, 'Sonata\\CoreBundle\\Form\\Type\\DateTimeRangeType' => function () {
    return ${($_ = isset($this->services['sonata.core.form.type.datetime_range']) ? $this->services['sonata.core.form.type.datetime_range'] : $this->load('getSonata_Core_Form_Type_DatetimeRangeService.php')) && false ?: '_'};
}, 'Sonata\\CoreBundle\\Form\\Type\\EqualType' => function () {
    return ${($_ = isset($this->services['sonata.core.form.type.equal']) ? $this->services['sonata.core.form.type.equal'] : $this->load('getSonata_Core_Form_Type_EqualService.php')) && false ?: '_'};
}, 'Sonata\\CoreBundle\\Form\\Type\\ImmutableArrayType' => function () {
    return ${($_ = isset($this->services['sonata.core.form.type.array']) ? $this->services['sonata.core.form.type.array'] : $this->services['sonata.core.form.type.array'] = new \Sonata\CoreBundle\Form\Type\ImmutableArrayType()) && false ?: '_'};
}, 'Sonata\\CoreBundle\\Form\\Type\\TranslatableChoiceType' => function () {
    return ${($_ = isset($this->services['sonata.core.form.type.translatable_choice']) ? $this->services['sonata.core.form.type.translatable_choice'] : $this->load('getSonata_Core_Form_Type_TranslatableChoiceService.php')) && false ?: '_'};
}, 'Sonata\\PageBundle\\Form\\Type\\CreateSnapshotType' => function () {
    return ${($_ = isset($this->services['sonata.page.form.create_snapshot']) ? $this->services['sonata.page.form.create_snapshot'] : $this->services['sonata.page.form.create_snapshot'] = new \Sonata\PageBundle\Form\Type\CreateSnapshotType()) && false ?: '_'};
}, 'Sonata\\PageBundle\\Form\\Type\\PageSelectorType' => function () {
    return ${($_ = isset($this->services['sonata.page.form.type.page_selector']) ? $this->services['sonata.page.form.type.page_selector'] : $this->load('getSonata_Page_Form_Type_PageSelectorService.php')) && false ?: '_'};
}, 'Sonata\\PageBundle\\Form\\Type\\PageTypeChoiceType' => function () {
    return ${($_ = isset($this->services['sonata.page.form.page_type_choice']) ? $this->services['sonata.page.form.page_type_choice'] : $this->load('getSonata_Page_Form_PageTypeChoiceService.php')) && false ?: '_'};
}, 'Sonata\\PageBundle\\Form\\Type\\TemplateChoiceType' => function () {
    return ${($_ = isset($this->services['sonata.page.form.template_choice']) ? $this->services['sonata.page.form.template_choice'] : $this->load('getSonata_Page_Form_TemplateChoiceService.php')) && false ?: '_'};
}, 'Sonata\\UserBundle\\Form\\Type\\RolesMatrixType' => function () {
    return ${($_ = isset($this->services['sonata.user.form.roles_matrix_type']) ? $this->services['sonata.user.form.roles_matrix_type'] : $this->load('getSonata_User_Form_RolesMatrixTypeService.php')) && false ?: '_'};
}, 'Sonata\\UserBundle\\Form\\Type\\SecurityRolesType' => function () {
    return ${($_ = isset($this->services['sonata.user.form.type.security_roles']) ? $this->services['sonata.user.form.type.security_roles'] : $this->load('getSonata_User_Form_Type_SecurityRolesService.php')) && false ?: '_'};
}, 'Sonata\\UserBundle\\Form\\Type\\UserGenderListType' => function () {
    return ${($_ = isset($this->services['sonata.user.form.gender_list']) ? $this->services['sonata.user.form.gender_list'] : $this->load('getSonata_User_Form_GenderListService.php')) && false ?: '_'};
}, 'Symfony\\Bridge\\Doctrine\\Form\\Type\\EntityType' => function () {
    return ${($_ = isset($this->services['form.type.entity']) ? $this->services['form.type.entity'] : $this->load('getForm_Type_EntityService.php')) && false ?: '_'};
}, 'Symfony\\Component\\Form\\Extension\\Core\\Type\\ChoiceType' => function () {
    return ${($_ = isset($this->services['form.type.choice']) ? $this->services['form.type.choice'] : $this->load('getForm_Type_ChoiceService.php')) && false ?: '_'};
}, 'Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType' => function () {
    return ${($_ = isset($this->services['form.type.form']) ? $this->services['form.type.form'] : $this->load('getForm_Type_FormService.php')) && false ?: '_'};
})), array('Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType' => new RewindableGenerator(function () {
    yield 0 => ${($_ = isset($this->services['form.type_extension.form.http_foundation']) ? $this->services['form.type_extension.form.http_foundation'] : $this->load('getForm_TypeExtension_Form_HttpFoundationService.php')) && false ?: '_'};
    yield 1 => ${($_ = isset($this->services['form.type_extension.form.validator']) ? $this->services['form.type_extension.form.validator'] : $this->load('getForm_TypeExtension_Form_ValidatorService.php')) && false ?: '_'};
    yield 2 => ${($_ = isset($this->services['form.type_extension.upload.validator']) ? $this->services['form.type_extension.upload.validator'] : $this->load('getForm_TypeExtension_Upload_ValidatorService.php')) && false ?: '_'};
    yield 3 => ${($_ = isset($this->services['form.type_extension.csrf']) ? $this->services['form.type_extension.csrf'] : $this->load('getForm_TypeExtension_CsrfService.php')) && false ?: '_'};
    yield 4 => ${($_ = isset($this->services['form.type_extension.form.data_collector']) ? $this->services['form.type_extension.form.data_collector'] : $this->load('getForm_TypeExtension_Form_DataCollectorService.php')) && false ?: '_'};
    yield 5 => ${($_ = isset($this->services['sonata.admin.form.extension.field']) ? $this->services['sonata.admin.form.extension.field'] : $this->load('getSonata_Admin_Form_Extension_FieldService.php')) && false ?: '_'};
    yield 6 => ${($_ = isset($this->services['sonata.admin.form.extension.field.mopa']) ? $this->services['sonata.admin.form.extension.field.mopa'] : $this->services['sonata.admin.form.extension.field.mopa'] = new \Sonata\AdminBundle\Form\Extension\Field\Type\MopaCompatibilityTypeFieldExtension()) && false ?: '_'};
}, 7), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\RepeatedType' => new RewindableGenerator(function () {
    yield 0 => ${($_ = isset($this->services['form.type_extension.repeated.validator']) ? $this->services['form.type_extension.repeated.validator'] : $this->services['form.type_extension.repeated.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension()) && false ?: '_'};
}, 1), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\SubmitType' => new RewindableGenerator(function () {
    yield 0 => ${($_ = isset($this->services['form.type_extension.submit.validator']) ? $this->services['form.type_extension.submit.validator'] : $this->services['form.type_extension.submit.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension()) && false ?: '_'};
}, 1), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\ChoiceType' => new RewindableGenerator(function () {
    yield 0 => ${($_ = isset($this->services['sonata.admin.form.extension.choice']) ? $this->services['sonata.admin.form.extension.choice'] : $this->services['sonata.admin.form.extension.choice'] = new \Sonata\AdminBundle\Form\Extension\ChoiceTypeExtension()) && false ?: '_'};
}, 1)), new RewindableGenerator(function () {
    yield 0 => ${($_ = isset($this->services['form.type_guesser.validator']) ? $this->services['form.type_guesser.validator'] : $this->load('getForm_TypeGuesser_ValidatorService.php')) && false ?: '_'};
    yield 1 => ${($_ = isset($this->services['form.type_guesser.doctrine']) ? $this->services['form.type_guesser.doctrine'] : $this->load('getForm_TypeGuesser_DoctrineService.php')) && false ?: '_'};
}, 2), NULL)), ${($_ = isset($this->services['form.resolved_type_factory']) ? $this->services['form.resolved_type_factory'] : $this->load('getForm_ResolvedTypeFactoryService.php')) && false ?: '_'});
